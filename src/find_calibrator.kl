--=============================================================================
-- PROGRAM: MeasureRodPoint
-- DESCRIPTION: Program do pomiaru pozycji punktu (preta) w przestrzeni
--              za pomoca flanszy (TCP0) i czujnika dotyku na DI[1].
--              Wymaga 3 pomiarow z roznych kierunkow.
--=============================================================================

INCLUDE const-status

PROGRAM MeasureCalibratorPoint

VAR
  start_pos       : POSITION;
  pos_contact_X   : POSITION;
  pos_contact_Y   : POSITION;
  pos_contact_Z   : POSITION;
  pos_rod_center  : POSITION;
  temp_pos        : POSITION;
  start_move_pos  : POSITION;
  target_pos      : POSITION;

  status          : INTEGER;
  error_flag      : BOOLEAN := FALSE;

  -- Wektory kierunkow
  vec_dir_X_plus  : POSITION;
  vec_dir_Y_plus  : POSITION;
  vec_dir_Z_minus : POSITION;

  -- Orientacje flanszy
  orient_horiz_X  : POSITION;
  orient_horiz_Y  : POSITION;
  orient_vert_Z   : POSITION;

  rod_diameter    : REAL;
  dist_approach  : REAL;

BEGIN
  $UTOOL := 0;
  $UFRAME[1] := JTRANSLATE(0,0,0);
  $UFRAME_NUM[1] := 1;

  rod_diameter := 20.0;
  dist_approach := 100.0;

  vec_dir_X_plus  := {x 1.0, y 0.0, z 0.0, w 0.0, p 0.0, r 0.0};
  vec_dir_Y_plus  := {x 0.0, y 1.0, z 0.0, w 0.0, p 0.0, r 0.0};
  vec_dir_Z_minus := {x 0.0, y 0.0, z -1.0, w 0.0, p 0.0, r 0.0};

  orient_horiz_X  := {x 0.0, y 0.0, z 0.0, w 0.0, p 90.0, r 0.0};
  orient_horiz_Y  := {x 0.0, y 0.0, z 0.0, w 90.0, p 90.0, r 0.0};
  orient_vert_Z   := {x 0.0, y 0.0, z 0.0, w 0.0, p 180.0, r 0.0};

  TPWRITE('--- Start pomiaru preta ---');
  WAIT UI[1] = 'ON';
  DELAY 0.1;
  start_pos := CURPOS(0,0);

  -- Prostowanie flanszy
  BuildPositionWithOrientation(start_pos, orient_horiz_X, temp_pos);
  MoveLinearToPosition(temp_pos, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad podczas ustawiania orientacji flanszy.');
    GOTO EndProgram;
  ENDIF;

  -- Pomiar X
  TPWRITE('Pomiar kierunek +X...');
  
  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_X_plus.x * dist_approach,
                                        vec_dir_X_plus.y * dist_approach,
                                        vec_dir_X_plus.z * dist_approach);
  BuildPositionWithOrientation(temp_pos, orient_horiz_X, target_pos);                                  

  MoveUntilContact(target_pos, pos_contact_X, status);
  IF status <> STATUS_CONTACT THEN
    TPWRITE('Blad podczas pomiaru X. Status: ' + INT_TO_STR(status));
    error_flag := TRUE;
    GOTO EndProgram;
  ENDIF;

  -- Ruch przejściowy do pozycji start Y
  TPWRITE('Ruch przejsciowy przed pomiarem Y...');

  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_Y_plus.x * dist_approach,
                                        vec_dir_Y_plus.y * dist_approach * (-1),
                                        vec_dir_Y_plus.z * dist_approach);
  BuildPositionWithOrientation(temp_pos, orient_horiz_Y, target_pos);  
  MoveLinearToPosition(target_pos, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad podczas przejazdu.');
    GOTO EndProgram;
  ENDIF;   
  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_X_plus.x * dist_approach + rod_diameter/2,
                                        vec_dir_X_plus.y * dist_approach,
                                        vec_dir_X_plus.z * dist_approach);
  BuildPositionWithOrientation(temp_pos, orient_horiz_Y, target_pos);  
  MoveLinearToPosition(target_pos, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad podczas przejazdu.');
    GOTO EndProgram;
  ENDIF;     

  -- Pomiar Y
  TPWRITE('Pomiar kierunek +Y...');

  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_Y_plus.x * dist_approach,
                                        vec_dir_Y_plus.y * dist_approach,
                                        vec_dir_Y_plus.z * dist_approach);
  BuildPositionWithOrientation(temp_pos, orient_horiz_Y, target_pos);     

  MoveUntilContact(target_pos, pos_contact_Y, status);
  IF status <> STATUS_CONTACT THEN
    TPWRITE('Blad podczas pomiaru Y. Status: ' + INT_TO_STR(status));
    error_flag := TRUE;
    GOTO EndProgram;
  ENDIF;

  -- Ruch przejściowy do pozycji start Z
  TPWRITE('Ruch przejsciowy przed pomiarem Z...');

  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_Z_minus.x * dist_approach,
                                        vec_dir_Z_minus.y * dist_approach,
                                        vec_dir_Z_minus.z * dist_approach * (-1));
  BuildPositionWithOrientation(temp_pos, orient_vert_Z, target_pos);  
  MoveLinearToPosition(target_pos, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad podczas przejazdu.');
    GOTO EndProgram;
  ENDIF;   
  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_Y_plus.x * dist_approach,
                                        vec_dir_Y_plus.y * dist_approach + rod_diameter/2,
                                        vec_dir_Y_plus.z * dist_approach);
  BuildPositionWithOrientation(temp_pos, orient_vert_Z, target_pos);  
  MoveLinearToPosition(target_pos, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad podczas przejazdu.');
    GOTO EndProgram;
  ENDIF;     

  -- Pomiar Z
  TPWRITE('Pomiar kierunek -Z...');

  start_move_pos := CURPOS(0, 0);
  temp_pos := start_move_pos + TRANSLATE(vec_dir_Z_minus.x * dist_approach,
                                        vec_dir_Z_minus.y * dist_approach,
                                        vec_dir_Z_minus.z * dist_approach);
  BuildPositionWithOrientation(temp_pos, orient_horiz_Z, target_pos); 

  MoveUntilContact(target_pos, pos_contact_Z, status);
  IF status <> STATUS_CONTACT THEN
    TPWRITE('Blad podczas pomiaru Z. Status: ' + INT_TO_STR(status));
    error_flag := TRUE;
    GOTO EndProgram;
  ENDIF;

  -- Oblicz środek preta
  TPWRITE('Obliczanie pozycji srodka preta...');
  CalculateRodCenter(pos_contact_X, pos_contact_Y, pos_contact_Z, rod_diameter, pos_rod_center, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad obliczen srodka. Status: ' + INT_TO_STR(status));
    error_flag := TRUE;
    GOTO EndProgram;
  ENDIF;

  TPWRITE('srodek preta:');
  TPWRITE('X=' + REAL_TO_STR(pos_rod_center.x,3,3) + ', Y=' + REAL_TO_STR(pos_rod_center.y,3,3) + ', Z=' + REAL_TO_STR(pos_rod_center.z,3,3));
  
  SET_POS_REG(CAL_POS, pos_rod_center, status);
  IF status <> STATUS_OK THEN
    TPWRITE('Blad: nie można zapisac PR[20]');
    error_flag := TRUE;
    GOTO EndProgram;
  ENDIF;

<LABEL> EndProgram:
  IF error_flag THEN
    TPWRITE('Program zakonczony z bledem.');
  ELSE
    TPWRITE('Pomiar zakonczony pomyslnie.');
  ENDIF;

END MeasureCalibratorPoint

ROUTINE CalculateRodCenter(
    pos_contact_X  : POSITION;
    pos_contact_Y  : POSITION;
    pos_contact_Z  : POSITION;
    diameter       : REAL;
    OUT pos_center : POSITION;
    OUT status : INTEGER )

  VAR
    radius : REAL;

BEGIN
  status := STATUS_OK;
  radius := diameter / 2.0;

  pos_center.x := pos_contact_X.x + radius;
  pos_center.y := pos_contact_Y.y - radius;
  pos_center.z := pos_contact_Z.z - radius;

  pos_center.w := 0.0;
  pos_center.p := 0.0;
  pos_center.r := 0.0;

  TPWRITE('Obliczono pozycje srodka.');

END CalculateRodCenter -- Koniec procedury CalculateRodCenter