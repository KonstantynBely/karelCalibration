PROGRAM AutoCalibrateTCP

-- Zakładamy, że w INCLUDE masz:
INCLUDE const_status
INCLUDE const_reg

CONST
    TCP_Z_LENGTH = 150.0;
    Z2_LENGTH = 30.0;
    Z1_LENGTH = 50.0;

VAR
  default_pos        : XYZWPR;
  start_pos          : XYZWPR;
  probe_pos          : XYZWPR;   
  contact_x1         : XYZWPR;
  contact_x2         : XYZWPR;
  contact_y1         : XYZWPR;
  contact_y2         : XYZWPR;
  contact_z          : XYZWPR;

  temp_pos           : XYZWPR;
  target_pos         : XYZWPR;

  rod_radius         : REAL = 10.0;
  z1                 : REAL = 20.0;
  z2                 : REAL = 80.0;
  delta_x1           : REAL;
  delta_x2           : REAL;
  delta_y1           : REAL;
  delta_y2           : REAL;

  theta_x_rad        : REAL;
  theta_y_rad        : REAL;

  result             : INTEGER;
  status             : INTEGER;
  error_flag         : BOOLEAN = FALSE;

  vec_dir            : XYZWPR;
  orientXZ           : XYZWPR;
  orientYZ           : XYZWPR;

BEGIN
  $UTOOL = 0;
  $UFRAME[1] = JTRANSLATE(0,0,0);
  $UFRAME_NUM[1] = 1;

  WRITE('--- START AUTOKALIBRACJI TCP ---');

  default_pos = CURPOS(0, 0);

  -- Wektory i orientacja do kontaktu prostopadłego
  vec_dir = {x 0.0, y 1.0, z 0.0, w 0.0, p 0.0, r 0.0};
  orientXZ = {x 0.0, y 0.0, z 0.0, w -90.0, p 0.0, r -90.0};
  orientYZ = {x 0.0, y 0.0, z 0.0, w -90.0, p -90.0, r -90.0};

  GET_POS_REG(CAL_REG, probe_pos, status);
  start_pos = probe_pos + TRANSLATE(-100 - TCP_Z_LENGTH,
                                    0,
                                    -30);
  MvLnToPos(start_pos, status);
  IF status <> ST_OK THEN
    WRITE('Blad podczas przejazdu.');
    error_flag = TRUE; 
    GOTO EndProgram;    
  ENDIF;      

  temp_pos = start_pos + TRANSLATE(0,
                                     -100,
                                     0);
  BldPosWOr(temp_pos, orientYZ, target_pos);
  MvLnToPos(target_pos, status);
  IF status <> ST_OK THEN
    WRITE('Blad podczas przejazdu.');
    error_flag = TRUE; 
    GOTO EndProgram;    
  ENDIF;   

  temp_pos = probe_pos + TRANSLATE(Z2_LENGTH-TCP_Z_LENGTH,
                                    -100,
                                    -30);
  BldPosWOr(temp_pos, orientYZ, target_pos);
  MvLnToPos(target_pos, status);
  IF status <> ST_OK THEN
    WRITE('Blad podczas przejazdu.');
    error_flag = TRUE; 
    GOTO EndProgram;    
  ENDIF;   

  -- 1. PODJAZD NA Z2 w YZ
  temp_pos = CURPOS(0,0) + TRANSLATE(0, vec_dir.y * 150.0, 0);
  BldPosWOr(temp_pos, orientYZ, target_pos);
  MvUntCon(target_pos, contact_x2, status);
  IF status <> ST_CONTACT THEN
   error_flag = TRUE; 
   GOTO EndProgram; 
  ENDIF;

  temp_pos = probe_pos + TRANSLATE(Z1_LENGTH-TCP_Z_LENGTH,
                                    -100,
                                    -30);
  BldPosWOr(temp_pos, orientYZ, target_pos);
  MvLnToPos(target_pos, status);
  IF status <> ST_OK THEN
    WRITE('Blad podczas przejazdu.');
    error_flag = TRUE; 
    GOTO EndProgram;    
  ENDIF;   

  -- 2. PODJAZD NA Z1 w YZ
  temp_pos = CURPOS(0,0) + TRANSLATE(0, vec_dir.y * 150.0, 0);
  BldPosWOr(temp_pos, orientYZ, target_pos);
  MvUntCon(target_pos, contact_x1, status);
  IF status <> ST_CONTACT THEN
   error_flag = TRUE; 
   GOTO EndProgram; 
  ENDIF;

  temp_pos = probe_pos + TRANSLATE(Z2_LENGTH-TCP_Z_LENGTH,
                                    -100,
                                    -30);
  BldPosWOr(temp_pos, orientXZ, target_pos);
  MvLnToPos(target_pos, status);
  IF status <> ST_OK THEN
    WRITE('Blad podczas przejazdu.');
    error_flag = TRUE; 
    GOTO EndProgram;    
  ENDIF;   

  -- 3. PODJAZD NA Z2
  temp_pos = CURPOS(0,0) + TRANSLATE(0, vec_dir.y * 150.0, 0);
  BldPosWOr(temp_pos, orientXZ, target_pos);
  MvUntCon(target_pos, contact_y2, status);
  IF status <> ST_CONTACT THEN
   error_flag = TRUE; 
   GOTO EndProgram; 
  ENDIF;

  temp_pos = probe_pos + TRANSLATE(Z1_LENGTH-TCP_Z_LENGTH,
                                    -100,
                                    -30);
  BldPosWOr(temp_pos, orientXZ, target_pos);
  MvLnToPos(target_pos, status);
  IF status <> ST_OK THEN
    WRITE('Blad podczas przejazdu.');
    error_flag = TRUE; 
    GOTO EndProgram;    
  ENDIF; 

  -- 4. PODJAZD NA Z1
  temp_pos = CURPOS(0,0) + TRANSLATE(0, vec_dir.y * 150.0, 0);
  BldPosWOr(temp_pos, orientXZ, target_pos);
  MvUntCon(target_pos, contact_y2, status);
  IF status <> ST_CONTACT THEN
   error_flag = TRUE; 
   GOTO EndProgram; 
  ENDIF;

  -- Wyliczenie delta, katow itd
  delta_x2 = 

  -- 5. PODJAZD DO GÓRY W KIERUNKU -Z
  temp_pos = CURPOS(0,0) + TRANSLATE(0.0, 0.0, -120.0);
  BldPosWOr(temp_pos, orient, target_pos);
  MvUntCon(target_pos, contact_z, status);
  IF status <> ST_CONTACT THEN
   error_flag = TRUE; 
   GOTO EndProgram; 
  ENDIF;

  -- OBLICZENIA: kąty rotacji
  delta_x1 = contact_x1.x;
  delta_x2 = contact_x2.x;
  delta_y1 = contact_y1.y;
  delta_y2 = contact_y2.y;

  theta_y_rad = ATAN((delta_x2 - delta_x1) / (z2 - z1));
  theta_x_rad = ATAN((delta_y2 - delta_y1) / (z2 - z1));

  -- Długość narzędzia (przyjęta)
  tool_len = contact_z.z + rod_radius;

  -- WYZNACZ POZYCJĘ TCP WZGLĘDEM FLANSZY
  SET_REAL_REG(1, RAD_TO_DEG(theta_x_rad), result); -- θx
  SET_REAL_REG(2, RAD_TO_DEG(theta_y_rad), result); -- θy
  SET_REAL_REG(3, tool_len, result);               -- Ztool

  WRITE('Kalibracja zakonczona.');
  WRITE('Theta X = ' + REAL_TO_STR(RAD_TO_DEG(theta_x_rad), 3, 2));
  WRITE('Theta Y = ' + REAL_TO_STR(RAD_TO_DEG(theta_y_rad), 3, 2));
  WRITE('Dlugosc narzedzia = ' + REAL_TO_STR(tool_len, 3, 2));

  -- Powrót na początkową pozycję
  BldPosWOr(start_pose, orient, target_pos);
  MvLnToPos(target_pos, status);
  RETURN;


EndProgram::
  IF error_flag THEN
    WRITE('Program zakonczony z bledem.');
    MvLnToPos(default_pos, status);
    IF status <> ST_OK THEN
      WRITE('Blad podczas przejazdu.');
    ENDIF;  
  ELSE
    WRITE('Pomiar zakonczony pomyslnie.');
    MvLnToPos(default_pos, status);
    IF status <> ST_OK THEN
      WRITE('Blad podczas przejazdu.');
    ENDIF;  
  ENDIF;

END AutoCalibrateTCP